---
layout: post
title:  "git"
date:   2016-08-02 14:47:58 +0800
categories: git
---

## 分布式管理工具－－GIT

看到这个标题，也许你会问，什么是**分布式管理**？

对于刚刚接触编程的朋友来说，这个问题其实不重要。为什么呢？对于大部分同学来说，我们的精力是有限的。在去了解一项新的事物的时候，把有限的精力用在最需要了解的事物上是一种比较推荐的做法。

回归到这个问题上。什么是分布式管理？以及它有什么好处？往往是对版本控制及其历史有一定的了解和实践的人才会发表评论，这样一来，初学者很容易会被其中的一些名词给绕昏了头，或者是读了也不能理解，反而丧失了学习的兴趣。

当然咯，如果你是IQ爆棚，精力无限，或者碰巧是处女座的话，也可以深入研究一下分布式， 以及分布式管理的对立面－－**集中式管理**的原理，以及分布式管理相比较而言的优缺点。


## git初印象

废话不多说，接下来我们就来直观的感受一下git是干什么的吧。

git是干什么的呢？打个比方，F公司要开发一个App，请了A，B，C三个人协作开发（落实到生产环境的项目，很少是个人开发的，人多力量大嘛）。这个时候，A，B，C三个人需要把各自写的代码放到同一个地方吧？这是git提供的第一个功能

**公共代码管理仓库**

接下来呢，A，B，C这三个人中，C比较粗心，经常提交了不该提交的代码，又或者是删了不该删的东西。

A，B虽然比较少出错，但是总有时候两个人同时以不同的方式修改了同一个文件的同一个地方，到底该以谁的修改为准呢？

又有些时候，老板比较变态，要将版本退回到一个星期之前的样子（。。。）

这时候，git为我们提供了处理这些情况的各种应对措施，暂且称它为

**万能情况应对Git**


## git简介

在刚刚的介绍中，我们了解到，git有一个公共代码管理仓库，我们称之为远程仓库，除了远程仓库外，A，B，C三个人本地机器上也存在有一个git仓库，称之为本地仓库。

不能理解，没关系，慢慢往下看。

### 远程仓库 => 本地仓库

大家应该都用过github的免费仓库管理吧（没有的话，请点击[这里](http://github.com)，按照官网指示注册帐号，创建repository），github上的仓库（repository）其实就可以看作是一个远程仓库。

接下来通过
~~~git
git clone http://github.com/[your_user_name]/[your_repository_name]
~~~
你就可以将这个远程仓库克隆到你本地的机器上，这个克隆下来的文件夹可以看作是一个本地仓库

### 本地仓库 => 远程仓库

反过来，从本地仓库到远程仓库怎么办呢？莫方

1. 检查你本地机器中是否安装的git，如果没有记错的话，OSX自带git，ubuntu可通过一下代码安装
~~~
sudo apt-install git
~~~

windows系统请自行百度安装

2. 安装好了git以后，从命令刚进入目标文件夹，执行
~~~
git init
~~~
这样就生成了一个本地仓库

再输入
~~~
git remote add origin [your_github_repository_address]
~~~
就将本地仓库同步到了远程仓库

说到这里，希望大家对远程仓库和本地仓库至少已经有了一个比较直观的感受吧。


## 常用git命令

这一节
萝卜青菜，各有所爱！有的人喜欢用图形化界面（atom，eclipse），有的人（笔者）喜欢用命令行
git add, git commit -m "add xxx file"

git status

git diff xxx.txt

git log --graph: commit id

git checkout --file， 有没有被放入暂存区域, 版本库中的文件替换工作区的版本
git checkout

git push -u


## 一些基本的原理

其中的.git目录就是用来追踪文件变化的（跟踪了哪些文件，有哪些变化，文本文件，二进制文件，怎样取消已经追踪的变化）

本地仓库： 工作区，版本库（.git）＝> 暂存区（stage）
git管理的是修改， 而不是文件

本地关联远程 git remote add origin
远程克隆到本地 git clone xxxx

5. git中的版本
HEAD
HEAD^
HEAD-100

6. 退回以前的版本
git reset --hard HEAD or git reaset --hard [7位版本号]
git-extras: git undo

7. 删除文件
需不需要git rm

8.前进到之前的版本
git reflog: 查看命令历史

9.分支的作用？？
创建分支， 合并分支（merge rebase）
解决冲突，不同分支内容的标记
<<<<<<<<<<<HEAD
===========
>>>>>>>>>>>Branch1

10.stash
git stash
git stash list
git stash pop / git stash apply

11. 标签

12. 自定义git
.gitignore
别名，配置文件放在了.git/config文件夹中

规范
bug分支（issue命名），feature分支（feature命名）

手动实践
github 创建repo
创建ssh key
ssh-keygen -t rsa -C ""
xxxxxx



